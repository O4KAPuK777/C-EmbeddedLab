
button_handling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000172c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080018b4  080018b4  000118b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018c4  080018c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080018c4  080018c4  000118c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080018cc  080018cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018cc  080018cc  000118cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018d0  080018d0  000118d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080018d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003db8  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f1c  00000000  00000000  00023dee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000400  00000000  00000000  00024d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000378  00000000  00000000  00025110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ed2e  00000000  00000000  00025488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000048d1  00000000  00000000  000441b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bbd78  00000000  00000000  00048a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001047ff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e5c  00000000  00000000  00104850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800189c 	.word	0x0800189c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800189c 	.word	0x0800189c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14d      	bne.n	80002a4 <__udivmoddi4+0xac>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d968      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b152      	cbz	r2, 800022a <__udivmoddi4+0x32>
 8000214:	fa01 f302 	lsl.w	r3, r1, r2
 8000218:	f1c2 0120 	rsb	r1, r2, #32
 800021c:	fa20 f101 	lsr.w	r1, r0, r1
 8000220:	fa0c fc02 	lsl.w	ip, ip, r2
 8000224:	ea41 0803 	orr.w	r8, r1, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 800022e:	0c21      	lsrs	r1, r4, #16
 8000230:	fbb8 fef5 	udiv	lr, r8, r5
 8000234:	fa1f f78c 	uxth.w	r7, ip
 8000238:	fb05 831e 	mls	r3, r5, lr, r8
 800023c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000240:	fb0e f107 	mul.w	r1, lr, r7
 8000244:	4299      	cmp	r1, r3
 8000246:	d90b      	bls.n	8000260 <__udivmoddi4+0x68>
 8000248:	eb1c 0303 	adds.w	r3, ip, r3
 800024c:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8000250:	f080 811e 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000254:	4299      	cmp	r1, r3
 8000256:	f240 811b 	bls.w	8000490 <__udivmoddi4+0x298>
 800025a:	f1ae 0e02 	sub.w	lr, lr, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f5 	udiv	r0, r3, r5
 8000268:	fb05 3310 	mls	r3, r5, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x96>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000280:	f080 8108 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8105 	bls.w	8000494 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000294:	2100      	movs	r1, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa8>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d908      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a8:	2e00      	cmp	r6, #0
 80002aa:	f000 80ee 	beq.w	800048a <__udivmoddi4+0x292>
 80002ae:	2100      	movs	r1, #0
 80002b0:	e9c6 0500 	strd	r0, r5, [r6]
 80002b4:	4608      	mov	r0, r1
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	42ab      	cmp	r3, r5
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb65 0303 	sbc.w	r3, r5, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e2      	beq.n	80002a0 <__udivmoddi4+0xa8>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7df      	b.n	80002a0 <__udivmoddi4+0xa8>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8091 	bne.w	8000410 <__udivmoddi4+0x218>
 80002ee:	eba1 050c 	sub.w	r5, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb5 f3f7 	udiv	r3, r5, r7
 8000300:	fb07 5013 	mls	r0, r7, r3, r5
 8000304:	0c25      	lsrs	r5, r4, #16
 8000306:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	42a8      	cmp	r0, r5
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0505 	adds.w	r5, ip, r5
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	42a8      	cmp	r0, r5
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a2d      	subs	r5, r5, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb5 f0f7 	udiv	r0, r5, r7
 800032c:	fb07 5510 	mls	r5, r7, r0, r5
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4628      	mov	r0, r5
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79e      	b.n	8000296 <__udivmoddi4+0x9e>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa05 f301 	lsl.w	r3, r5, r1
 800036e:	431c      	orrs	r4, r3
 8000370:	40fd      	lsrs	r5, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f301 	lsl.w	r3, r0, r1
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 5518 	mls	r5, r9, r8, r5
 8000388:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	42a8      	cmp	r0, r5
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0505 	adds.w	r5, ip, r5
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	42a8      	cmp	r0, r5
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4465      	add	r5, ip
 80003b0:	1a2d      	subs	r5, r5, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb5 f0f9 	udiv	r0, r5, r9
 80003b8:	fb09 5510 	mls	r5, r9, r0, r5
 80003bc:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	45ae      	cmp	lr, r5
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0505 	adds.w	r5, ip, r5
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	45ae      	cmp	lr, r5
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4465      	add	r5, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba5 050e 	sub.w	r5, r5, lr
 80003e6:	42a5      	cmp	r5, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15e      	cbz	r6, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb65 050e 	sbc.w	r5, r5, lr
 80003fa:	fa05 f707 	lsl.w	r7, r5, r7
 80003fe:	fa22 f301 	lsr.w	r3, r2, r1
 8000402:	40cd      	lsrs	r5, r1
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c6 7500 	strd	r7, r5, [r6]
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f103 	lsr.w	r1, r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa25 f303 	lsr.w	r3, r5, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	430d      	orrs	r5, r1
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000430:	fb07 3011 	mls	r0, r7, r1, r3
 8000434:	0c2b      	lsrs	r3, r5, #16
 8000436:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800043a:	fb01 f00e 	mul.w	r0, r1, lr
 800043e:	4298      	cmp	r0, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	4298      	cmp	r0, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3902      	subs	r1, #2
 8000456:	4463      	add	r3, ip
 8000458:	1a1b      	subs	r3, r3, r0
 800045a:	b2ad      	uxth	r5, r5
 800045c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000460:	fb07 3310 	mls	r3, r7, r0, r3
 8000464:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000468:	fb00 f30e 	mul.w	r3, r0, lr
 800046c:	42ab      	cmp	r3, r5
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0505 	adds.w	r5, ip, r5
 8000474:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	42ab      	cmp	r3, r5
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3802      	subs	r0, #2
 8000480:	4465      	add	r5, ip
 8000482:	1aed      	subs	r5, r5, r3
 8000484:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e707      	b.n	80002a0 <__udivmoddi4+0xa8>
 8000490:	4686      	mov	lr, r0
 8000492:	e6e5      	b.n	8000260 <__udivmoddi4+0x68>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fa      	b.n	800028e <__udivmoddi4+0x96>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4641      	mov	r1, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4465      	add	r5, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4608      	mov	r0, r1
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	6039      	str	r1, [r7, #0]
 80004d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	db0a      	blt.n	80004f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	b2da      	uxtb	r2, r3
 80004e4:	490c      	ldr	r1, [pc, #48]	; (8000518 <__NVIC_SetPriority+0x4c>)
 80004e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ea:	0112      	lsls	r2, r2, #4
 80004ec:	b2d2      	uxtb	r2, r2
 80004ee:	440b      	add	r3, r1
 80004f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004f4:	e00a      	b.n	800050c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	b2da      	uxtb	r2, r3
 80004fa:	4908      	ldr	r1, [pc, #32]	; (800051c <__NVIC_SetPriority+0x50>)
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	f003 030f 	and.w	r3, r3, #15
 8000502:	3b04      	subs	r3, #4
 8000504:	0112      	lsls	r2, r2, #4
 8000506:	b2d2      	uxtb	r2, r2
 8000508:	440b      	add	r3, r1
 800050a:	761a      	strb	r2, [r3, #24]
}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	e000e100 	.word	0xe000e100
 800051c:	e000ed00 	.word	0xe000ed00

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000524:	f000 f9b0 	bl	8000888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000528:	f000 f80c 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052c:	f000 f874 	bl	8000618 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  NVIC_SetPriority(SysTick_IRQn, 1);
 8000530:	2101      	movs	r1, #1
 8000532:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000536:	f7ff ffc9 	bl	80004cc <__NVIC_SetPriority>
	  NVIC_SetPriority(EXTI0_IRQn, 2);
 800053a:	2102      	movs	r1, #2
 800053c:	2006      	movs	r0, #6
 800053e:	f7ff ffc5 	bl	80004cc <__NVIC_SetPriority>
	  NVIC_SetPriority(SysTick_IRQn, 1);
 8000542:	e7f5      	b.n	8000530 <main+0x10>

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b094      	sub	sp, #80	; 0x50
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0320 	add.w	r3, r7, #32
 800054e:	2230      	movs	r2, #48	; 0x30
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f001 f99a 	bl	800188c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 030c 	add.w	r3, r7, #12
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000568:	2300      	movs	r3, #0
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	4b28      	ldr	r3, [pc, #160]	; (8000610 <SystemClock_Config+0xcc>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	4a27      	ldr	r2, [pc, #156]	; (8000610 <SystemClock_Config+0xcc>)
 8000572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000576:	6413      	str	r3, [r2, #64]	; 0x40
 8000578:	4b25      	ldr	r3, [pc, #148]	; (8000610 <SystemClock_Config+0xcc>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	4b22      	ldr	r3, [pc, #136]	; (8000614 <SystemClock_Config+0xd0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a21      	ldr	r2, [pc, #132]	; (8000614 <SystemClock_Config+0xd0>)
 800058e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <SystemClock_Config+0xd0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a0:	2301      	movs	r3, #1
 80005a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005aa:	2302      	movs	r3, #2
 80005ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005b4:	2304      	movs	r3, #4
 80005b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005b8:	23a8      	movs	r3, #168	; 0xa8
 80005ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005bc:	2302      	movs	r3, #2
 80005be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005c0:	2304      	movs	r3, #4
 80005c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 0320 	add.w	r3, r7, #32
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 fcd1 	bl	8000f70 <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005d4:	f000 f88a 	bl	80006ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d8:	230f      	movs	r3, #15
 80005da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005dc:	2302      	movs	r3, #2
 80005de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2105      	movs	r1, #5
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 ff32 	bl	8001460 <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000602:	f000 f873 	bl	80006ec <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3750      	adds	r7, #80	; 0x50
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800
 8000614:	40007000 	.word	0x40007000

08000618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <MX_GPIO_Init+0xc8>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a2a      	ldr	r2, [pc, #168]	; (80006e0 <MX_GPIO_Init+0xc8>)
 8000638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <MX_GPIO_Init+0xc8>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <MX_GPIO_Init+0xc8>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <MX_GPIO_Init+0xc8>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <MX_GPIO_Init+0xc8>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <MX_GPIO_Init+0xc8>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a1c      	ldr	r2, [pc, #112]	; (80006e0 <MX_GPIO_Init+0xc8>)
 8000670:	f043 0308 	orr.w	r3, r3, #8
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <MX_GPIO_Init+0xc8>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0308 	and.w	r3, r3, #8
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000688:	4816      	ldr	r0, [pc, #88]	; (80006e4 <MX_GPIO_Init+0xcc>)
 800068a:	f000 fc37 	bl	8000efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800068e:	2301      	movs	r3, #1
 8000690:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000692:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000696:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	4619      	mov	r1, r3
 80006a2:	4811      	ldr	r0, [pc, #68]	; (80006e8 <MX_GPIO_Init+0xd0>)
 80006a4:	f000 fa90 	bl	8000bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006a8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80006ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ae:	2301      	movs	r3, #1
 80006b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	4619      	mov	r1, r3
 80006c0:	4808      	ldr	r0, [pc, #32]	; (80006e4 <MX_GPIO_Init+0xcc>)
 80006c2:	f000 fa81 	bl	8000bc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	2006      	movs	r0, #6
 80006cc:	f000 fa45 	bl	8000b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006d0:	2006      	movs	r0, #6
 80006d2:	f000 fa5e 	bl	8000b92 <HAL_NVIC_EnableIRQ>

}
 80006d6:	bf00      	nop
 80006d8:	3720      	adds	r7, #32
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40020c00 	.word	0x40020c00
 80006e8:	40020000 	.word	0x40020000

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <Error_Handler+0x8>
	...

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <HAL_MspInit+0x48>)
 8000704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000706:	4a0e      	ldr	r2, [pc, #56]	; (8000740 <HAL_MspInit+0x48>)
 8000708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070c:	6453      	str	r3, [r2, #68]	; 0x44
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <HAL_MspInit+0x48>)
 8000710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <HAL_MspInit+0x48>)
 8000720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000722:	4a07      	ldr	r2, [pc, #28]	; (8000740 <HAL_MspInit+0x48>)
 8000724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000728:	6413      	str	r3, [r2, #64]	; 0x40
 800072a:	4b05      	ldr	r3, [pc, #20]	; (8000740 <HAL_MspInit+0x48>)
 800072c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr
 8000740:	40023800 	.word	0x40023800

08000744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <NMI_Handler+0x4>

0800074a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <HardFault_Handler+0x4>

08000750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <MemManage_Handler+0x4>

08000756 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075a:	e7fe      	b.n	800075a <BusFault_Handler+0x4>

0800075c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <UsageFault_Handler+0x4>

08000762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr

0800076e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr

0800077a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr

08000786 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800078a:	f000 f8cf 	bl	800092c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800079e:	4821      	ldr	r0, [pc, #132]	; (8000824 <EXTI0_IRQHandler+0x90>)
 80007a0:	f000 fbac 	bl	8000efc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007aa:	481e      	ldr	r0, [pc, #120]	; (8000824 <EXTI0_IRQHandler+0x90>)
 80007ac:	f000 fba6 	bl	8000efc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007b6:	481b      	ldr	r0, [pc, #108]	; (8000824 <EXTI0_IRQHandler+0x90>)
 80007b8:	f000 fba0 	bl	8000efc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007c2:	4818      	ldr	r0, [pc, #96]	; (8000824 <EXTI0_IRQHandler+0x90>)
 80007c4:	f000 fb9a 	bl	8000efc <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 80007c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007cc:	f000 f8ca 	bl	8000964 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d6:	4813      	ldr	r0, [pc, #76]	; (8000824 <EXTI0_IRQHandler+0x90>)
 80007d8:	f000 fb90 	bl	8000efc <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80007dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e0:	f000 f8c0 	bl	8000964 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ea:	480e      	ldr	r0, [pc, #56]	; (8000824 <EXTI0_IRQHandler+0x90>)
 80007ec:	f000 fb86 	bl	8000efc <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80007f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007f4:	f000 f8b6 	bl	8000964 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007fe:	4809      	ldr	r0, [pc, #36]	; (8000824 <EXTI0_IRQHandler+0x90>)
 8000800:	f000 fb7c 	bl	8000efc <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000804:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000808:	f000 f8ac 	bl	8000964 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000812:	4804      	ldr	r0, [pc, #16]	; (8000824 <EXTI0_IRQHandler+0x90>)
 8000814:	f000 fb72 	bl	8000efc <HAL_GPIO_WritePin>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000818:	2001      	movs	r0, #1
 800081a:	f000 fb87 	bl	8000f2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40020c00 	.word	0x40020c00

08000828 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr

08000834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800086c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000838:	480d      	ldr	r0, [pc, #52]	; (8000870 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800083a:	490e      	ldr	r1, [pc, #56]	; (8000874 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800083c:	4a0e      	ldr	r2, [pc, #56]	; (8000878 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000840:	e002      	b.n	8000848 <LoopCopyDataInit>

08000842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000846:	3304      	adds	r3, #4

08000848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800084c:	d3f9      	bcc.n	8000842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800084e:	4a0b      	ldr	r2, [pc, #44]	; (800087c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000850:	4c0b      	ldr	r4, [pc, #44]	; (8000880 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000854:	e001      	b.n	800085a <LoopFillZerobss>

08000856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000858:	3204      	adds	r2, #4

0800085a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800085c:	d3fb      	bcc.n	8000856 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800085e:	f7ff ffe3 	bl	8000828 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000862:	f000 ffef 	bl	8001844 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000866:	f7ff fe5b 	bl	8000520 <main>
  bx  lr    
 800086a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800086c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000874:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000878:	080018d4 	.word	0x080018d4
  ldr r2, =_sbss
 800087c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000880:	2000002c 	.word	0x2000002c

08000884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000884:	e7fe      	b.n	8000884 <ADC_IRQHandler>
	...

08000888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800088c:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <HAL_Init+0x40>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a0d      	ldr	r2, [pc, #52]	; (80008c8 <HAL_Init+0x40>)
 8000892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000896:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000898:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <HAL_Init+0x40>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <HAL_Init+0x40>)
 800089e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <HAL_Init+0x40>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a07      	ldr	r2, [pc, #28]	; (80008c8 <HAL_Init+0x40>)
 80008aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b0:	2003      	movs	r0, #3
 80008b2:	f000 f947 	bl	8000b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008b6:	200f      	movs	r0, #15
 80008b8:	f000 f808 	bl	80008cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008bc:	f7ff ff1c 	bl	80006f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023c00 	.word	0x40023c00

080008cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_InitTick+0x54>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <HAL_InitTick+0x58>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	4619      	mov	r1, r3
 80008de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 f95f 	bl	8000bae <HAL_SYSTICK_Config>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e00e      	b.n	8000918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2b0f      	cmp	r3, #15
 80008fe:	d80a      	bhi.n	8000916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000900:	2200      	movs	r2, #0
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000908:	f000 f927 	bl	8000b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800090c:	4a06      	ldr	r2, [pc, #24]	; (8000928 <HAL_InitTick+0x5c>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000912:	2300      	movs	r3, #0
 8000914:	e000      	b.n	8000918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
}
 8000918:	4618      	mov	r0, r3
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000000 	.word	0x20000000
 8000924:	20000008 	.word	0x20000008
 8000928:	20000004 	.word	0x20000004

0800092c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <HAL_IncTick+0x1c>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	461a      	mov	r2, r3
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <HAL_IncTick+0x20>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4413      	add	r3, r2
 800093c:	4a03      	ldr	r2, [pc, #12]	; (800094c <HAL_IncTick+0x20>)
 800093e:	6013      	str	r3, [r2, #0]
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr
 8000948:	20000008 	.word	0x20000008
 800094c:	20000028 	.word	0x20000028

08000950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return uwTick;
 8000954:	4b02      	ldr	r3, [pc, #8]	; (8000960 <HAL_GetTick+0x10>)
 8000956:	681b      	ldr	r3, [r3, #0]
}
 8000958:	4618      	mov	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	20000028 	.word	0x20000028

08000964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800096c:	f7ff fff0 	bl	8000950 <HAL_GetTick>
 8000970:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800097c:	d005      	beq.n	800098a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <HAL_Delay+0x44>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	461a      	mov	r2, r3
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	4413      	add	r3, r2
 8000988:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800098a:	bf00      	nop
 800098c:	f7ff ffe0 	bl	8000950 <HAL_GetTick>
 8000990:	4602      	mov	r2, r0
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	429a      	cmp	r2, r3
 800099a:	d8f7      	bhi.n	800098c <HAL_Delay+0x28>
  {
  }
}
 800099c:	bf00      	nop
 800099e:	bf00      	nop
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000008 	.word	0x20000008

080009ac <__NVIC_SetPriorityGrouping>:
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c8:	4013      	ands	r3, r2
 80009ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009de:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	60d3      	str	r3, [r2, #12]
}
 80009e4:	bf00      	nop
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_GetPriorityGrouping>:
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <__NVIC_GetPriorityGrouping+0x18>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	0a1b      	lsrs	r3, r3, #8
 80009fe:	f003 0307 	and.w	r3, r3, #7
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_EnableIRQ>:
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	db0b      	blt.n	8000a3a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	f003 021f 	and.w	r2, r3, #31
 8000a28:	4906      	ldr	r1, [pc, #24]	; (8000a44 <__NVIC_EnableIRQ+0x34>)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	095b      	lsrs	r3, r3, #5
 8000a30:	2001      	movs	r0, #1
 8000a32:	fa00 f202 	lsl.w	r2, r0, r2
 8000a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	e000e100 	.word	0xe000e100

08000a48 <__NVIC_SetPriority>:
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	6039      	str	r1, [r7, #0]
 8000a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	db0a      	blt.n	8000a72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	490c      	ldr	r1, [pc, #48]	; (8000a94 <__NVIC_SetPriority+0x4c>)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	0112      	lsls	r2, r2, #4
 8000a68:	b2d2      	uxtb	r2, r2
 8000a6a:	440b      	add	r3, r1
 8000a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a70:	e00a      	b.n	8000a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4908      	ldr	r1, [pc, #32]	; (8000a98 <__NVIC_SetPriority+0x50>)
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	f003 030f 	and.w	r3, r3, #15
 8000a7e:	3b04      	subs	r3, #4
 8000a80:	0112      	lsls	r2, r2, #4
 8000a82:	b2d2      	uxtb	r2, r2
 8000a84:	440b      	add	r3, r1
 8000a86:	761a      	strb	r2, [r3, #24]
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000e100 	.word	0xe000e100
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b089      	sub	sp, #36	; 0x24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	f1c3 0307 	rsb	r3, r3, #7
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	bf28      	it	cs
 8000aba:	2304      	movcs	r3, #4
 8000abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	2b06      	cmp	r3, #6
 8000ac4:	d902      	bls.n	8000acc <NVIC_EncodePriority+0x30>
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3b03      	subs	r3, #3
 8000aca:	e000      	b.n	8000ace <NVIC_EncodePriority+0x32>
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	43da      	mvns	r2, r3
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	401a      	ands	r2, r3
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	fa01 f303 	lsl.w	r3, r1, r3
 8000aee:	43d9      	mvns	r1, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af4:	4313      	orrs	r3, r2
         );
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3724      	adds	r7, #36	; 0x24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b10:	d301      	bcc.n	8000b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b12:	2301      	movs	r3, #1
 8000b14:	e00f      	b.n	8000b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b16:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <SysTick_Config+0x40>)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b1e:	210f      	movs	r1, #15
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b24:	f7ff ff90 	bl	8000a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <SysTick_Config+0x40>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2e:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <SysTick_Config+0x40>)
 8000b30:	2207      	movs	r2, #7
 8000b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	e000e010 	.word	0xe000e010

08000b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ff2d 	bl	80009ac <__NVIC_SetPriorityGrouping>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b086      	sub	sp, #24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	4603      	mov	r3, r0
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
 8000b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b6c:	f7ff ff42 	bl	80009f4 <__NVIC_GetPriorityGrouping>
 8000b70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	68b9      	ldr	r1, [r7, #8]
 8000b76:	6978      	ldr	r0, [r7, #20]
 8000b78:	f7ff ff90 	bl	8000a9c <NVIC_EncodePriority>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b82:	4611      	mov	r1, r2
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff5f 	bl	8000a48 <__NVIC_SetPriority>
}
 8000b8a:	bf00      	nop
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	4603      	mov	r3, r0
 8000b9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff35 	bl	8000a10 <__NVIC_EnableIRQ>
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff ffa2 	bl	8000b00 <SysTick_Config>
 8000bbc:	4603      	mov	r3, r0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b089      	sub	sp, #36	; 0x24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
 8000be2:	e16b      	b.n	8000ebc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000be4:	2201      	movs	r2, #1
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	697a      	ldr	r2, [r7, #20]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	f040 815a 	bne.w	8000eb6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f003 0303 	and.w	r3, r3, #3
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d005      	beq.n	8000c1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d130      	bne.n	8000c7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	2203      	movs	r2, #3
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	69ba      	ldr	r2, [r7, #24]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	68da      	ldr	r2, [r3, #12]
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c50:	2201      	movs	r2, #1
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	091b      	lsrs	r3, r3, #4
 8000c66:	f003 0201 	and.w	r2, r3, #1
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f003 0303 	and.w	r3, r3, #3
 8000c84:	2b03      	cmp	r3, #3
 8000c86:	d017      	beq.n	8000cb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	2203      	movs	r2, #3
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	689a      	ldr	r2, [r3, #8]
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f003 0303 	and.w	r3, r3, #3
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d123      	bne.n	8000d0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	08da      	lsrs	r2, r3, #3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3208      	adds	r2, #8
 8000ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	f003 0307 	and.w	r3, r3, #7
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	220f      	movs	r2, #15
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	691a      	ldr	r2, [r3, #16]
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	08da      	lsrs	r2, r3, #3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3208      	adds	r2, #8
 8000d06:	69b9      	ldr	r1, [r7, #24]
 8000d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	2203      	movs	r2, #3
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	4013      	ands	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 0203 	and.w	r2, r3, #3
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f000 80b4 	beq.w	8000eb6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b5f      	ldr	r3, [pc, #380]	; (8000ed0 <HAL_GPIO_Init+0x308>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	4a5e      	ldr	r2, [pc, #376]	; (8000ed0 <HAL_GPIO_Init+0x308>)
 8000d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5e:	4b5c      	ldr	r3, [pc, #368]	; (8000ed0 <HAL_GPIO_Init+0x308>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d6a:	4a5a      	ldr	r2, [pc, #360]	; (8000ed4 <HAL_GPIO_Init+0x30c>)
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	089b      	lsrs	r3, r3, #2
 8000d70:	3302      	adds	r3, #2
 8000d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	220f      	movs	r2, #15
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43db      	mvns	r3, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a51      	ldr	r2, [pc, #324]	; (8000ed8 <HAL_GPIO_Init+0x310>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d02b      	beq.n	8000dee <HAL_GPIO_Init+0x226>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a50      	ldr	r2, [pc, #320]	; (8000edc <HAL_GPIO_Init+0x314>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d025      	beq.n	8000dea <HAL_GPIO_Init+0x222>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a4f      	ldr	r2, [pc, #316]	; (8000ee0 <HAL_GPIO_Init+0x318>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d01f      	beq.n	8000de6 <HAL_GPIO_Init+0x21e>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a4e      	ldr	r2, [pc, #312]	; (8000ee4 <HAL_GPIO_Init+0x31c>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d019      	beq.n	8000de2 <HAL_GPIO_Init+0x21a>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a4d      	ldr	r2, [pc, #308]	; (8000ee8 <HAL_GPIO_Init+0x320>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d013      	beq.n	8000dde <HAL_GPIO_Init+0x216>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a4c      	ldr	r2, [pc, #304]	; (8000eec <HAL_GPIO_Init+0x324>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d00d      	beq.n	8000dda <HAL_GPIO_Init+0x212>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a4b      	ldr	r2, [pc, #300]	; (8000ef0 <HAL_GPIO_Init+0x328>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d007      	beq.n	8000dd6 <HAL_GPIO_Init+0x20e>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a4a      	ldr	r2, [pc, #296]	; (8000ef4 <HAL_GPIO_Init+0x32c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d101      	bne.n	8000dd2 <HAL_GPIO_Init+0x20a>
 8000dce:	2307      	movs	r3, #7
 8000dd0:	e00e      	b.n	8000df0 <HAL_GPIO_Init+0x228>
 8000dd2:	2308      	movs	r3, #8
 8000dd4:	e00c      	b.n	8000df0 <HAL_GPIO_Init+0x228>
 8000dd6:	2306      	movs	r3, #6
 8000dd8:	e00a      	b.n	8000df0 <HAL_GPIO_Init+0x228>
 8000dda:	2305      	movs	r3, #5
 8000ddc:	e008      	b.n	8000df0 <HAL_GPIO_Init+0x228>
 8000dde:	2304      	movs	r3, #4
 8000de0:	e006      	b.n	8000df0 <HAL_GPIO_Init+0x228>
 8000de2:	2303      	movs	r3, #3
 8000de4:	e004      	b.n	8000df0 <HAL_GPIO_Init+0x228>
 8000de6:	2302      	movs	r3, #2
 8000de8:	e002      	b.n	8000df0 <HAL_GPIO_Init+0x228>
 8000dea:	2301      	movs	r3, #1
 8000dec:	e000      	b.n	8000df0 <HAL_GPIO_Init+0x228>
 8000dee:	2300      	movs	r3, #0
 8000df0:	69fa      	ldr	r2, [r7, #28]
 8000df2:	f002 0203 	and.w	r2, r2, #3
 8000df6:	0092      	lsls	r2, r2, #2
 8000df8:	4093      	lsls	r3, r2
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e00:	4934      	ldr	r1, [pc, #208]	; (8000ed4 <HAL_GPIO_Init+0x30c>)
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	089b      	lsrs	r3, r3, #2
 8000e06:	3302      	adds	r3, #2
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e0e:	4b3a      	ldr	r3, [pc, #232]	; (8000ef8 <HAL_GPIO_Init+0x330>)
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	43db      	mvns	r3, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e32:	4a31      	ldr	r2, [pc, #196]	; (8000ef8 <HAL_GPIO_Init+0x330>)
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e38:	4b2f      	ldr	r3, [pc, #188]	; (8000ef8 <HAL_GPIO_Init+0x330>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e5c:	4a26      	ldr	r2, [pc, #152]	; (8000ef8 <HAL_GPIO_Init+0x330>)
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e62:	4b25      	ldr	r3, [pc, #148]	; (8000ef8 <HAL_GPIO_Init+0x330>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e86:	4a1c      	ldr	r2, [pc, #112]	; (8000ef8 <HAL_GPIO_Init+0x330>)
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <HAL_GPIO_Init+0x330>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000eb0:	4a11      	ldr	r2, [pc, #68]	; (8000ef8 <HAL_GPIO_Init+0x330>)
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	61fb      	str	r3, [r7, #28]
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	2b0f      	cmp	r3, #15
 8000ec0:	f67f ae90 	bls.w	8000be4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	3724      	adds	r7, #36	; 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40013800 	.word	0x40013800
 8000ed8:	40020000 	.word	0x40020000
 8000edc:	40020400 	.word	0x40020400
 8000ee0:	40020800 	.word	0x40020800
 8000ee4:	40020c00 	.word	0x40020c00
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	40021400 	.word	0x40021400
 8000ef0:	40021800 	.word	0x40021800
 8000ef4:	40021c00 	.word	0x40021c00
 8000ef8:	40013c00 	.word	0x40013c00

08000efc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	807b      	strh	r3, [r7, #2]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f0c:	787b      	ldrb	r3, [r7, #1]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f12:	887a      	ldrh	r2, [r7, #2]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f18:	e003      	b.n	8000f22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f1a:	887b      	ldrh	r3, [r7, #2]
 8000f1c:	041a      	lsls	r2, r3, #16
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	619a      	str	r2, [r3, #24]
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f38:	695a      	ldr	r2, [r3, #20]
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d006      	beq.n	8000f50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f48:	88fb      	ldrh	r3, [r7, #6]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 f806 	bl	8000f5c <HAL_GPIO_EXTI_Callback>
  }
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40013c00 	.word	0x40013c00

08000f5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e267      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d075      	beq.n	800107a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f8e:	4b88      	ldr	r3, [pc, #544]	; (80011b0 <HAL_RCC_OscConfig+0x240>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f003 030c 	and.w	r3, r3, #12
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	d00c      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f9a:	4b85      	ldr	r3, [pc, #532]	; (80011b0 <HAL_RCC_OscConfig+0x240>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fa2:	2b08      	cmp	r3, #8
 8000fa4:	d112      	bne.n	8000fcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fa6:	4b82      	ldr	r3, [pc, #520]	; (80011b0 <HAL_RCC_OscConfig+0x240>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fb2:	d10b      	bne.n	8000fcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb4:	4b7e      	ldr	r3, [pc, #504]	; (80011b0 <HAL_RCC_OscConfig+0x240>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d05b      	beq.n	8001078 <HAL_RCC_OscConfig+0x108>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d157      	bne.n	8001078 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e242      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd4:	d106      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x74>
 8000fd6:	4b76      	ldr	r3, [pc, #472]	; (80011b0 <HAL_RCC_OscConfig+0x240>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a75      	ldr	r2, [pc, #468]	; (80011b0 <HAL_RCC_OscConfig+0x240>)
 8000fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	e01d      	b.n	8001020 <HAL_RCC_OscConfig+0xb0>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fec:	d10c      	bne.n	8001008 <HAL_RCC_OscConfig+0x98>
 8000fee:	4b70      	ldr	r3, [pc, #448]	; (80011b0 <HAL_RCC_OscConfig+0x240>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a6f      	ldr	r2, [pc, #444]	; (80011b0 <HAL_RCC_OscConfig+0x240>)
 8000ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	4b6d      	ldr	r3, [pc, #436]	; (80011b0 <HAL_RCC_OscConfig+0x240>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a6c      	ldr	r2, [pc, #432]	; (80011b0 <HAL_RCC_OscConfig+0x240>)
 8001000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	e00b      	b.n	8001020 <HAL_RCC_OscConfig+0xb0>
 8001008:	4b69      	ldr	r3, [pc, #420]	; (80011b0 <HAL_RCC_OscConfig+0x240>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a68      	ldr	r2, [pc, #416]	; (80011b0 <HAL_RCC_OscConfig+0x240>)
 800100e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001012:	6013      	str	r3, [r2, #0]
 8001014:	4b66      	ldr	r3, [pc, #408]	; (80011b0 <HAL_RCC_OscConfig+0x240>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a65      	ldr	r2, [pc, #404]	; (80011b0 <HAL_RCC_OscConfig+0x240>)
 800101a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800101e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d013      	beq.n	8001050 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001028:	f7ff fc92 	bl	8000950 <HAL_GetTick>
 800102c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800102e:	e008      	b.n	8001042 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001030:	f7ff fc8e 	bl	8000950 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b64      	cmp	r3, #100	; 0x64
 800103c:	d901      	bls.n	8001042 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e207      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001042:	4b5b      	ldr	r3, [pc, #364]	; (80011b0 <HAL_RCC_OscConfig+0x240>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0f0      	beq.n	8001030 <HAL_RCC_OscConfig+0xc0>
 800104e:	e014      	b.n	800107a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001050:	f7ff fc7e 	bl	8000950 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001058:	f7ff fc7a 	bl	8000950 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b64      	cmp	r3, #100	; 0x64
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e1f3      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800106a:	4b51      	ldr	r3, [pc, #324]	; (80011b0 <HAL_RCC_OscConfig+0x240>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f0      	bne.n	8001058 <HAL_RCC_OscConfig+0xe8>
 8001076:	e000      	b.n	800107a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	2b00      	cmp	r3, #0
 8001084:	d063      	beq.n	800114e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001086:	4b4a      	ldr	r3, [pc, #296]	; (80011b0 <HAL_RCC_OscConfig+0x240>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 030c 	and.w	r3, r3, #12
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00b      	beq.n	80010aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001092:	4b47      	ldr	r3, [pc, #284]	; (80011b0 <HAL_RCC_OscConfig+0x240>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800109a:	2b08      	cmp	r3, #8
 800109c:	d11c      	bne.n	80010d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800109e:	4b44      	ldr	r3, [pc, #272]	; (80011b0 <HAL_RCC_OscConfig+0x240>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d116      	bne.n	80010d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010aa:	4b41      	ldr	r3, [pc, #260]	; (80011b0 <HAL_RCC_OscConfig+0x240>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d005      	beq.n	80010c2 <HAL_RCC_OscConfig+0x152>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d001      	beq.n	80010c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e1c7      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c2:	4b3b      	ldr	r3, [pc, #236]	; (80011b0 <HAL_RCC_OscConfig+0x240>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	4937      	ldr	r1, [pc, #220]	; (80011b0 <HAL_RCC_OscConfig+0x240>)
 80010d2:	4313      	orrs	r3, r2
 80010d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d6:	e03a      	b.n	800114e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d020      	beq.n	8001122 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010e0:	4b34      	ldr	r3, [pc, #208]	; (80011b4 <HAL_RCC_OscConfig+0x244>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e6:	f7ff fc33 	bl	8000950 <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ee:	f7ff fc2f 	bl	8000950 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e1a8      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001100:	4b2b      	ldr	r3, [pc, #172]	; (80011b0 <HAL_RCC_OscConfig+0x240>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d0f0      	beq.n	80010ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110c:	4b28      	ldr	r3, [pc, #160]	; (80011b0 <HAL_RCC_OscConfig+0x240>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	4925      	ldr	r1, [pc, #148]	; (80011b0 <HAL_RCC_OscConfig+0x240>)
 800111c:	4313      	orrs	r3, r2
 800111e:	600b      	str	r3, [r1, #0]
 8001120:	e015      	b.n	800114e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001122:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <HAL_RCC_OscConfig+0x244>)
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001128:	f7ff fc12 	bl	8000950 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001130:	f7ff fc0e 	bl	8000950 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e187      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001142:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <HAL_RCC_OscConfig+0x240>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1f0      	bne.n	8001130 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0308 	and.w	r3, r3, #8
 8001156:	2b00      	cmp	r3, #0
 8001158:	d036      	beq.n	80011c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d016      	beq.n	8001190 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <HAL_RCC_OscConfig+0x248>)
 8001164:	2201      	movs	r2, #1
 8001166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001168:	f7ff fbf2 	bl	8000950 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001170:	f7ff fbee 	bl	8000950 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e167      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <HAL_RCC_OscConfig+0x240>)
 8001184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d0f0      	beq.n	8001170 <HAL_RCC_OscConfig+0x200>
 800118e:	e01b      	b.n	80011c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <HAL_RCC_OscConfig+0x248>)
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001196:	f7ff fbdb 	bl	8000950 <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800119c:	e00e      	b.n	80011bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800119e:	f7ff fbd7 	bl	8000950 <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d907      	bls.n	80011bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e150      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
 80011b0:	40023800 	.word	0x40023800
 80011b4:	42470000 	.word	0x42470000
 80011b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011bc:	4b88      	ldr	r3, [pc, #544]	; (80013e0 <HAL_RCC_OscConfig+0x470>)
 80011be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1ea      	bne.n	800119e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 8097 	beq.w	8001304 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011d6:	2300      	movs	r3, #0
 80011d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011da:	4b81      	ldr	r3, [pc, #516]	; (80013e0 <HAL_RCC_OscConfig+0x470>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10f      	bne.n	8001206 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	4b7d      	ldr	r3, [pc, #500]	; (80013e0 <HAL_RCC_OscConfig+0x470>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	4a7c      	ldr	r2, [pc, #496]	; (80013e0 <HAL_RCC_OscConfig+0x470>)
 80011f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f4:	6413      	str	r3, [r2, #64]	; 0x40
 80011f6:	4b7a      	ldr	r3, [pc, #488]	; (80013e0 <HAL_RCC_OscConfig+0x470>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001202:	2301      	movs	r3, #1
 8001204:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001206:	4b77      	ldr	r3, [pc, #476]	; (80013e4 <HAL_RCC_OscConfig+0x474>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120e:	2b00      	cmp	r3, #0
 8001210:	d118      	bne.n	8001244 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001212:	4b74      	ldr	r3, [pc, #464]	; (80013e4 <HAL_RCC_OscConfig+0x474>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a73      	ldr	r2, [pc, #460]	; (80013e4 <HAL_RCC_OscConfig+0x474>)
 8001218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800121e:	f7ff fb97 	bl	8000950 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001226:	f7ff fb93 	bl	8000950 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e10c      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001238:	4b6a      	ldr	r3, [pc, #424]	; (80013e4 <HAL_RCC_OscConfig+0x474>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0f0      	beq.n	8001226 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d106      	bne.n	800125a <HAL_RCC_OscConfig+0x2ea>
 800124c:	4b64      	ldr	r3, [pc, #400]	; (80013e0 <HAL_RCC_OscConfig+0x470>)
 800124e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001250:	4a63      	ldr	r2, [pc, #396]	; (80013e0 <HAL_RCC_OscConfig+0x470>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	6713      	str	r3, [r2, #112]	; 0x70
 8001258:	e01c      	b.n	8001294 <HAL_RCC_OscConfig+0x324>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	2b05      	cmp	r3, #5
 8001260:	d10c      	bne.n	800127c <HAL_RCC_OscConfig+0x30c>
 8001262:	4b5f      	ldr	r3, [pc, #380]	; (80013e0 <HAL_RCC_OscConfig+0x470>)
 8001264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001266:	4a5e      	ldr	r2, [pc, #376]	; (80013e0 <HAL_RCC_OscConfig+0x470>)
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	6713      	str	r3, [r2, #112]	; 0x70
 800126e:	4b5c      	ldr	r3, [pc, #368]	; (80013e0 <HAL_RCC_OscConfig+0x470>)
 8001270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001272:	4a5b      	ldr	r2, [pc, #364]	; (80013e0 <HAL_RCC_OscConfig+0x470>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6713      	str	r3, [r2, #112]	; 0x70
 800127a:	e00b      	b.n	8001294 <HAL_RCC_OscConfig+0x324>
 800127c:	4b58      	ldr	r3, [pc, #352]	; (80013e0 <HAL_RCC_OscConfig+0x470>)
 800127e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001280:	4a57      	ldr	r2, [pc, #348]	; (80013e0 <HAL_RCC_OscConfig+0x470>)
 8001282:	f023 0301 	bic.w	r3, r3, #1
 8001286:	6713      	str	r3, [r2, #112]	; 0x70
 8001288:	4b55      	ldr	r3, [pc, #340]	; (80013e0 <HAL_RCC_OscConfig+0x470>)
 800128a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800128c:	4a54      	ldr	r2, [pc, #336]	; (80013e0 <HAL_RCC_OscConfig+0x470>)
 800128e:	f023 0304 	bic.w	r3, r3, #4
 8001292:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d015      	beq.n	80012c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800129c:	f7ff fb58 	bl	8000950 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a2:	e00a      	b.n	80012ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012a4:	f7ff fb54 	bl	8000950 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e0cb      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ba:	4b49      	ldr	r3, [pc, #292]	; (80013e0 <HAL_RCC_OscConfig+0x470>)
 80012bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0ee      	beq.n	80012a4 <HAL_RCC_OscConfig+0x334>
 80012c6:	e014      	b.n	80012f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c8:	f7ff fb42 	bl	8000950 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ce:	e00a      	b.n	80012e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012d0:	f7ff fb3e 	bl	8000950 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	f241 3288 	movw	r2, #5000	; 0x1388
 80012de:	4293      	cmp	r3, r2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e0b5      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e6:	4b3e      	ldr	r3, [pc, #248]	; (80013e0 <HAL_RCC_OscConfig+0x470>)
 80012e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1ee      	bne.n	80012d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012f2:	7dfb      	ldrb	r3, [r7, #23]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d105      	bne.n	8001304 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012f8:	4b39      	ldr	r3, [pc, #228]	; (80013e0 <HAL_RCC_OscConfig+0x470>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	4a38      	ldr	r2, [pc, #224]	; (80013e0 <HAL_RCC_OscConfig+0x470>)
 80012fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001302:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 80a1 	beq.w	8001450 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800130e:	4b34      	ldr	r3, [pc, #208]	; (80013e0 <HAL_RCC_OscConfig+0x470>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 030c 	and.w	r3, r3, #12
 8001316:	2b08      	cmp	r3, #8
 8001318:	d05c      	beq.n	80013d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d141      	bne.n	80013a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001322:	4b31      	ldr	r3, [pc, #196]	; (80013e8 <HAL_RCC_OscConfig+0x478>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001328:	f7ff fb12 	bl	8000950 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001330:	f7ff fb0e 	bl	8000950 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e087      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001342:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <HAL_RCC_OscConfig+0x470>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69da      	ldr	r2, [r3, #28]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a1b      	ldr	r3, [r3, #32]
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135c:	019b      	lsls	r3, r3, #6
 800135e:	431a      	orrs	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001364:	085b      	lsrs	r3, r3, #1
 8001366:	3b01      	subs	r3, #1
 8001368:	041b      	lsls	r3, r3, #16
 800136a:	431a      	orrs	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001370:	061b      	lsls	r3, r3, #24
 8001372:	491b      	ldr	r1, [pc, #108]	; (80013e0 <HAL_RCC_OscConfig+0x470>)
 8001374:	4313      	orrs	r3, r2
 8001376:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <HAL_RCC_OscConfig+0x478>)
 800137a:	2201      	movs	r2, #1
 800137c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137e:	f7ff fae7 	bl	8000950 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001386:	f7ff fae3 	bl	8000950 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e05c      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <HAL_RCC_OscConfig+0x470>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0x416>
 80013a4:	e054      	b.n	8001450 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <HAL_RCC_OscConfig+0x478>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fad0 	bl	8000950 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013b4:	f7ff facc 	bl	8000950 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e045      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_RCC_OscConfig+0x470>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f0      	bne.n	80013b4 <HAL_RCC_OscConfig+0x444>
 80013d2:	e03d      	b.n	8001450 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d107      	bne.n	80013ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e038      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40007000 	.word	0x40007000
 80013e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013ec:	4b1b      	ldr	r3, [pc, #108]	; (800145c <HAL_RCC_OscConfig+0x4ec>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d028      	beq.n	800144c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001404:	429a      	cmp	r2, r3
 8001406:	d121      	bne.n	800144c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001412:	429a      	cmp	r2, r3
 8001414:	d11a      	bne.n	800144c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800141c:	4013      	ands	r3, r2
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001422:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001424:	4293      	cmp	r3, r2
 8001426:	d111      	bne.n	800144c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001432:	085b      	lsrs	r3, r3, #1
 8001434:	3b01      	subs	r3, #1
 8001436:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001438:	429a      	cmp	r2, r3
 800143a:	d107      	bne.n	800144c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001446:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001448:	429a      	cmp	r2, r3
 800144a:	d001      	beq.n	8001450 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e000      	b.n	8001452 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800

08001460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e0cc      	b.n	800160e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001474:	4b68      	ldr	r3, [pc, #416]	; (8001618 <HAL_RCC_ClockConfig+0x1b8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	429a      	cmp	r2, r3
 8001480:	d90c      	bls.n	800149c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001482:	4b65      	ldr	r3, [pc, #404]	; (8001618 <HAL_RCC_ClockConfig+0x1b8>)
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800148a:	4b63      	ldr	r3, [pc, #396]	; (8001618 <HAL_RCC_ClockConfig+0x1b8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	429a      	cmp	r2, r3
 8001496:	d001      	beq.n	800149c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e0b8      	b.n	800160e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d020      	beq.n	80014ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d005      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014b4:	4b59      	ldr	r3, [pc, #356]	; (800161c <HAL_RCC_ClockConfig+0x1bc>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	4a58      	ldr	r2, [pc, #352]	; (800161c <HAL_RCC_ClockConfig+0x1bc>)
 80014ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0308 	and.w	r3, r3, #8
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d005      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014cc:	4b53      	ldr	r3, [pc, #332]	; (800161c <HAL_RCC_ClockConfig+0x1bc>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	4a52      	ldr	r2, [pc, #328]	; (800161c <HAL_RCC_ClockConfig+0x1bc>)
 80014d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014d8:	4b50      	ldr	r3, [pc, #320]	; (800161c <HAL_RCC_ClockConfig+0x1bc>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	494d      	ldr	r1, [pc, #308]	; (800161c <HAL_RCC_ClockConfig+0x1bc>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d044      	beq.n	8001580 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d107      	bne.n	800150e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fe:	4b47      	ldr	r3, [pc, #284]	; (800161c <HAL_RCC_ClockConfig+0x1bc>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d119      	bne.n	800153e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e07f      	b.n	800160e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d003      	beq.n	800151e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800151a:	2b03      	cmp	r3, #3
 800151c:	d107      	bne.n	800152e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800151e:	4b3f      	ldr	r3, [pc, #252]	; (800161c <HAL_RCC_ClockConfig+0x1bc>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d109      	bne.n	800153e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e06f      	b.n	800160e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152e:	4b3b      	ldr	r3, [pc, #236]	; (800161c <HAL_RCC_ClockConfig+0x1bc>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e067      	b.n	800160e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800153e:	4b37      	ldr	r3, [pc, #220]	; (800161c <HAL_RCC_ClockConfig+0x1bc>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f023 0203 	bic.w	r2, r3, #3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	4934      	ldr	r1, [pc, #208]	; (800161c <HAL_RCC_ClockConfig+0x1bc>)
 800154c:	4313      	orrs	r3, r2
 800154e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001550:	f7ff f9fe 	bl	8000950 <HAL_GetTick>
 8001554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001556:	e00a      	b.n	800156e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001558:	f7ff f9fa 	bl	8000950 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	f241 3288 	movw	r2, #5000	; 0x1388
 8001566:	4293      	cmp	r3, r2
 8001568:	d901      	bls.n	800156e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e04f      	b.n	800160e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156e:	4b2b      	ldr	r3, [pc, #172]	; (800161c <HAL_RCC_ClockConfig+0x1bc>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 020c 	and.w	r2, r3, #12
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	429a      	cmp	r2, r3
 800157e:	d1eb      	bne.n	8001558 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001580:	4b25      	ldr	r3, [pc, #148]	; (8001618 <HAL_RCC_ClockConfig+0x1b8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0307 	and.w	r3, r3, #7
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	429a      	cmp	r2, r3
 800158c:	d20c      	bcs.n	80015a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158e:	4b22      	ldr	r3, [pc, #136]	; (8001618 <HAL_RCC_ClockConfig+0x1b8>)
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001596:	4b20      	ldr	r3, [pc, #128]	; (8001618 <HAL_RCC_ClockConfig+0x1b8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d001      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e032      	b.n	800160e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d008      	beq.n	80015c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015b4:	4b19      	ldr	r3, [pc, #100]	; (800161c <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	4916      	ldr	r1, [pc, #88]	; (800161c <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d009      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015d2:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_RCC_ClockConfig+0x1bc>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	490e      	ldr	r1, [pc, #56]	; (800161c <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015e6:	f000 f821 	bl	800162c <HAL_RCC_GetSysClockFreq>
 80015ea:	4602      	mov	r2, r0
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	091b      	lsrs	r3, r3, #4
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	490a      	ldr	r1, [pc, #40]	; (8001620 <HAL_RCC_ClockConfig+0x1c0>)
 80015f8:	5ccb      	ldrb	r3, [r1, r3]
 80015fa:	fa22 f303 	lsr.w	r3, r2, r3
 80015fe:	4a09      	ldr	r2, [pc, #36]	; (8001624 <HAL_RCC_ClockConfig+0x1c4>)
 8001600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_RCC_ClockConfig+0x1c8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff f960 	bl	80008cc <HAL_InitTick>

  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40023c00 	.word	0x40023c00
 800161c:	40023800 	.word	0x40023800
 8001620:	080018b4 	.word	0x080018b4
 8001624:	20000000 	.word	0x20000000
 8001628:	20000004 	.word	0x20000004

0800162c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800162c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001630:	b094      	sub	sp, #80	; 0x50
 8001632:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	647b      	str	r3, [r7, #68]	; 0x44
 8001638:	2300      	movs	r3, #0
 800163a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800163c:	2300      	movs	r3, #0
 800163e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001644:	4b7c      	ldr	r3, [pc, #496]	; (8001838 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 030c 	and.w	r3, r3, #12
 800164c:	2b08      	cmp	r3, #8
 800164e:	d00d      	beq.n	800166c <HAL_RCC_GetSysClockFreq+0x40>
 8001650:	2b08      	cmp	r3, #8
 8001652:	f200 80e7 	bhi.w	8001824 <HAL_RCC_GetSysClockFreq+0x1f8>
 8001656:	2b00      	cmp	r3, #0
 8001658:	d002      	beq.n	8001660 <HAL_RCC_GetSysClockFreq+0x34>
 800165a:	2b04      	cmp	r3, #4
 800165c:	d003      	beq.n	8001666 <HAL_RCC_GetSysClockFreq+0x3a>
 800165e:	e0e1      	b.n	8001824 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001660:	4b76      	ldr	r3, [pc, #472]	; (800183c <HAL_RCC_GetSysClockFreq+0x210>)
 8001662:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001664:	e0e1      	b.n	800182a <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001666:	4b76      	ldr	r3, [pc, #472]	; (8001840 <HAL_RCC_GetSysClockFreq+0x214>)
 8001668:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800166a:	e0de      	b.n	800182a <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800166c:	4b72      	ldr	r3, [pc, #456]	; (8001838 <HAL_RCC_GetSysClockFreq+0x20c>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001674:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001676:	4b70      	ldr	r3, [pc, #448]	; (8001838 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d065      	beq.n	800174e <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001682:	4b6d      	ldr	r3, [pc, #436]	; (8001838 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	099b      	lsrs	r3, r3, #6
 8001688:	2200      	movs	r2, #0
 800168a:	63bb      	str	r3, [r7, #56]	; 0x38
 800168c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800168e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001694:	633b      	str	r3, [r7, #48]	; 0x30
 8001696:	2300      	movs	r3, #0
 8001698:	637b      	str	r3, [r7, #52]	; 0x34
 800169a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800169e:	4622      	mov	r2, r4
 80016a0:	462b      	mov	r3, r5
 80016a2:	f04f 0000 	mov.w	r0, #0
 80016a6:	f04f 0100 	mov.w	r1, #0
 80016aa:	0159      	lsls	r1, r3, #5
 80016ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016b0:	0150      	lsls	r0, r2, #5
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4621      	mov	r1, r4
 80016b8:	1a51      	subs	r1, r2, r1
 80016ba:	6139      	str	r1, [r7, #16]
 80016bc:	4629      	mov	r1, r5
 80016be:	eb63 0301 	sbc.w	r3, r3, r1
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80016d0:	4659      	mov	r1, fp
 80016d2:	018b      	lsls	r3, r1, #6
 80016d4:	4651      	mov	r1, sl
 80016d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016da:	4651      	mov	r1, sl
 80016dc:	018a      	lsls	r2, r1, #6
 80016de:	46d4      	mov	ip, sl
 80016e0:	ebb2 080c 	subs.w	r8, r2, ip
 80016e4:	4659      	mov	r1, fp
 80016e6:	eb63 0901 	sbc.w	r9, r3, r1
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	f04f 0300 	mov.w	r3, #0
 80016f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016fe:	4690      	mov	r8, r2
 8001700:	4699      	mov	r9, r3
 8001702:	4623      	mov	r3, r4
 8001704:	eb18 0303 	adds.w	r3, r8, r3
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	462b      	mov	r3, r5
 800170c:	eb49 0303 	adc.w	r3, r9, r3
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800171e:	4629      	mov	r1, r5
 8001720:	024b      	lsls	r3, r1, #9
 8001722:	4620      	mov	r0, r4
 8001724:	4629      	mov	r1, r5
 8001726:	4604      	mov	r4, r0
 8001728:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800172c:	4601      	mov	r1, r0
 800172e:	024a      	lsls	r2, r1, #9
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001736:	2200      	movs	r2, #0
 8001738:	62bb      	str	r3, [r7, #40]	; 0x28
 800173a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800173c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001740:	f7fe fd42 	bl	80001c8 <__aeabi_uldivmod>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4613      	mov	r3, r2
 800174a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800174c:	e05c      	b.n	8001808 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800174e:	4b3a      	ldr	r3, [pc, #232]	; (8001838 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	099b      	lsrs	r3, r3, #6
 8001754:	2200      	movs	r2, #0
 8001756:	4618      	mov	r0, r3
 8001758:	4611      	mov	r1, r2
 800175a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800175e:	623b      	str	r3, [r7, #32]
 8001760:	2300      	movs	r3, #0
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
 8001764:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001768:	4642      	mov	r2, r8
 800176a:	464b      	mov	r3, r9
 800176c:	f04f 0000 	mov.w	r0, #0
 8001770:	f04f 0100 	mov.w	r1, #0
 8001774:	0159      	lsls	r1, r3, #5
 8001776:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800177a:	0150      	lsls	r0, r2, #5
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	46c4      	mov	ip, r8
 8001782:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001786:	4640      	mov	r0, r8
 8001788:	4649      	mov	r1, r9
 800178a:	468c      	mov	ip, r1
 800178c:	eb63 0b0c 	sbc.w	fp, r3, ip
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800179c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80017a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80017a4:	ebb2 040a 	subs.w	r4, r2, sl
 80017a8:	eb63 050b 	sbc.w	r5, r3, fp
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	00eb      	lsls	r3, r5, #3
 80017b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017ba:	00e2      	lsls	r2, r4, #3
 80017bc:	4614      	mov	r4, r2
 80017be:	461d      	mov	r5, r3
 80017c0:	4603      	mov	r3, r0
 80017c2:	18e3      	adds	r3, r4, r3
 80017c4:	603b      	str	r3, [r7, #0]
 80017c6:	460b      	mov	r3, r1
 80017c8:	eb45 0303 	adc.w	r3, r5, r3
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017da:	4629      	mov	r1, r5
 80017dc:	028b      	lsls	r3, r1, #10
 80017de:	4620      	mov	r0, r4
 80017e0:	4629      	mov	r1, r5
 80017e2:	4604      	mov	r4, r0
 80017e4:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80017e8:	4601      	mov	r1, r0
 80017ea:	028a      	lsls	r2, r1, #10
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017f2:	2200      	movs	r2, #0
 80017f4:	61bb      	str	r3, [r7, #24]
 80017f6:	61fa      	str	r2, [r7, #28]
 80017f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017fc:	f7fe fce4 	bl	80001c8 <__aeabi_uldivmod>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4613      	mov	r3, r2
 8001806:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_RCC_GetSysClockFreq+0x20c>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	0c1b      	lsrs	r3, r3, #16
 800180e:	f003 0303 	and.w	r3, r3, #3
 8001812:	3301      	adds	r3, #1
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001818:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800181a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800181c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001820:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001822:	e002      	b.n	800182a <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <HAL_RCC_GetSysClockFreq+0x210>)
 8001826:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800182a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800182c:	4618      	mov	r0, r3
 800182e:	3750      	adds	r7, #80	; 0x50
 8001830:	46bd      	mov	sp, r7
 8001832:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800
 800183c:	00f42400 	.word	0x00f42400
 8001840:	007a1200 	.word	0x007a1200

08001844 <__libc_init_array>:
 8001844:	b570      	push	{r4, r5, r6, lr}
 8001846:	4d0d      	ldr	r5, [pc, #52]	; (800187c <__libc_init_array+0x38>)
 8001848:	4c0d      	ldr	r4, [pc, #52]	; (8001880 <__libc_init_array+0x3c>)
 800184a:	1b64      	subs	r4, r4, r5
 800184c:	10a4      	asrs	r4, r4, #2
 800184e:	2600      	movs	r6, #0
 8001850:	42a6      	cmp	r6, r4
 8001852:	d109      	bne.n	8001868 <__libc_init_array+0x24>
 8001854:	4d0b      	ldr	r5, [pc, #44]	; (8001884 <__libc_init_array+0x40>)
 8001856:	4c0c      	ldr	r4, [pc, #48]	; (8001888 <__libc_init_array+0x44>)
 8001858:	f000 f820 	bl	800189c <_init>
 800185c:	1b64      	subs	r4, r4, r5
 800185e:	10a4      	asrs	r4, r4, #2
 8001860:	2600      	movs	r6, #0
 8001862:	42a6      	cmp	r6, r4
 8001864:	d105      	bne.n	8001872 <__libc_init_array+0x2e>
 8001866:	bd70      	pop	{r4, r5, r6, pc}
 8001868:	f855 3b04 	ldr.w	r3, [r5], #4
 800186c:	4798      	blx	r3
 800186e:	3601      	adds	r6, #1
 8001870:	e7ee      	b.n	8001850 <__libc_init_array+0xc>
 8001872:	f855 3b04 	ldr.w	r3, [r5], #4
 8001876:	4798      	blx	r3
 8001878:	3601      	adds	r6, #1
 800187a:	e7f2      	b.n	8001862 <__libc_init_array+0x1e>
 800187c:	080018cc 	.word	0x080018cc
 8001880:	080018cc 	.word	0x080018cc
 8001884:	080018cc 	.word	0x080018cc
 8001888:	080018d0 	.word	0x080018d0

0800188c <memset>:
 800188c:	4402      	add	r2, r0
 800188e:	4603      	mov	r3, r0
 8001890:	4293      	cmp	r3, r2
 8001892:	d100      	bne.n	8001896 <memset+0xa>
 8001894:	4770      	bx	lr
 8001896:	f803 1b01 	strb.w	r1, [r3], #1
 800189a:	e7f9      	b.n	8001890 <memset+0x4>

0800189c <_init>:
 800189c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800189e:	bf00      	nop
 80018a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018a2:	bc08      	pop	{r3}
 80018a4:	469e      	mov	lr, r3
 80018a6:	4770      	bx	lr

080018a8 <_fini>:
 80018a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018aa:	bf00      	nop
 80018ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ae:	bc08      	pop	{r3}
 80018b0:	469e      	mov	lr, r3
 80018b2:	4770      	bx	lr
